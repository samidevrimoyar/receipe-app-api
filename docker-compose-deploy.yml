version: "3.9"

services:
  #####################
  # TRAEFIK - REVERSE PROXY
  #####################
  traefik:
    image: traefik:v3.0 # Her zaman belirli bir versiyon kullanmak daha iyidir
    container_name: traefik
    command:
      # Docker'ı bir yapılandırma sağlayıcısı olarak kullan
      - "--providers.docker=true"
      # Güvenlik için, sadece 'traefik.enable=true' etiketi olan konteynerleri aç
      - "--providers.docker.exposedbydefault=false"
      # HTTP (web) ve HTTPS (websecure) giriş noktalarını tanımla
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Let's Encrypt için bir "resolver" (çözücü) oluştur
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=sami.devrim@gmail.com" # Kendi email adresinizi girin
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # (Opsiyonel) Traefik Dashboard'u aktif et
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Sertifikaları kalıcı olarak saklamak için
      - traefik_certs:/letsencrypt
      # Traefik'in Docker olaylarını dinlemesi için
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - webnet
    labels:
      # HTTP -> HTTPS yönlendirmesi için genel bir kural
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp('{host:.+}')"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # (Opsiyonel) Traefik Dashboard'u güvenli hale getir
      - "traefik.http.routers.dashboard.rule=Host('traefik.superisi.net')" # Dashboard için bir subdomain belirleyin
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
  app:
    build:
      context: .
    restart: always
    volumes:
      - static-data:/vol/web
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
    networks:
      - webnet
    depends_on:
      - db
    labels:
      # Bu servisi Traefik'e tanıt
      - "traefik.enable=true"
      # Bu servise hangi domain ile erişileceğini belirt
      - "traefik.http.routers.recipe-app.rule=Host('superisi.net')" # KENDİ ALAN ADINIZI GİRİN
      # Sadece HTTPS (websecure) giriş noktasını kullanmasını sağla
      - "traefik.http.routers.recipe-app.entrypoints=websecure"
      # SSL sertifikası için hangi çözücüyü kullanacağını belirt
      - "traefik.http.routers.recipe-app.tls.certresolver=letsencrypt"
      # Trafiği uygulamanın içindeki hangi porta yönlendireceğini belirt
      - "traefik.http.services.recipe-app.loadbalancer.server.port=9000" # Gunicorn'un çalıştığı port

  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    networks:
      - webnet

  proxy:
    build:
      context: ./proxy
    restart: always
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static-data:/vol/static

volumes:
  traefik_certs:
  postgres-data:
  static-data:

networks:
  webnet:
    driver: bridge