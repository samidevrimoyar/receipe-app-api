version: '3.8'

services:
  #####################
  # TRAEFIK - REVERSE PROXY
  #####################
  traefik:
    image: traefik:v3.0 # Her zaman belirli bir versiyon kullanmak daha iyidir
    container_name: traefik
    command:
      # Docker'ı bir yapılandırma sağlayıcısı olarak kullan
      - "--providers.docker=true"
      # Güvenlik için, sadece 'traefik.enable=true' etiketi olan konteynerleri aç
      - "--providers.docker.exposedbydefault=false"
      # HTTP (web) ve HTTPS (websecure) giriş noktalarını tanımla
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Let's Encrypt için bir "resolver" (çözücü) oluştur
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=sami.devrim@gmail.com" # Kendi email adresinizi girin
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # (Opsiyonel) Traefik Dashboard'u aktif et
      - "--api.dashboard=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Sertifikaları kalıcı olarak saklamak için
      - traefik_certs:/letsencrypt
      # Traefik'in Docker olaylarını dinlemesi için
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - webnet
    labels:
      # HTTP -> HTTPS yönlendirmesi için genel bir kural
      - "traefik.enable=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # (Opsiyonel) Traefik Dashboard'u güvenli hale getir
      - "traefik.http.routers.dashboard.rule=Host(`traefik.superisi.net`)" # Dashboard için bir subdomain belirleyin
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"

  #####################
  # APP - DJANGO UYGULAMASI
  #####################
  app:
    build:
      context: .
    container_name: recipe_app_api
    volumes:
      - ./app:/app
      - dev-static-data:/vol/web # Statik ve medya dosyaları için
    env_file:
      - .env
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn app.wsgi:application --bind 0.0.0.0:9000"
    networks:
      - webnet
    depends_on:
      - db # Eğer db servisiniz de bu dosyadaysa
    labels:
      # Bu servisi Traefik'e tanıt
      - "traefik.enable=true"
      # Bu servise hangi domain ile erişileceğini belirt
      - "traefik.http.routers.recipe-app.rule=Host(`api.superisi.net`)" # KENDİ ALAN ADINIZI GİRİN
      # Sadece HTTPS (websecure) giriş noktasını kullanmasını sağla
      - "traefik.http.routers.recipe-app.entrypoints=websecure"
      # SSL sertifikası için hangi çözücüyü kullanacağını belirt
      - "traefik.http.routers.recipe-app.tls.certresolver=letsencrypt"
      # Trafiği uygulamanın içindeki hangi porta yönlendireceğini belirt
      - "traefik.http.services.recipe-app.loadbalancer.server.port=9000" # Gunicorn'un çalıştığı port

  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    networks:
      - webnet

volumes:
  traefik_certs:
  postgres-data:
  dev-static-data:

networks:
  webnet:
    driver: bridge
